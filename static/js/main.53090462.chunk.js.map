{"version":3,"sources":["Styles/Images/standard_doc_img_1.png","Styles/Images/patient-standard-img.png","Styles/Images/symptom_default_image.jpg","Styles/Images/treatment_default_image.png","Components/MainPage.js","Components/Doctors/DoctorCard.js","Components/Doctors/ListOfDoctors.js","Components/Doctors/DoctorsView.js","Actions/index.js","Components/Doctors/DoctorRegistrationForm.js","Components/Doctors/EditDoctorPatientCard.js","Components/Doctors/EditDoctorPatientList.js","Components/Doctors/DoctorDropdownPatientCard.js","Components/Doctors/DoctorEditForm.js","Components/Doctors/DoctorPatientCard.js","Components/Doctors/DoctorPatientList.js","Components/Doctors/IndividualDoctor.js","Components/Patients/PatientCard.js","Components/Patients/ListOfPatients.js","Components/Patients/PatientsView.js","Components/Patients/PatientRegistrationForm.js","Components/Patients/IndividualSymptom.js","Components/Patients/EditSymptomList.js","Components/Patients/EditSymptomListWrapper.js","Components/Patients/IndividualTreatment.js","Components/Patients/EditTreatmentList.js","Components/Patients/EditTreatmentListWrapper.js","Components/Patients/EditPatientDoctorCard.js","Components/Patients/PatientDropdownDoctorCard.js","Components/Patients/EditPatientDoctorCardWrapper.js","Components/Patients/PatientEditForm.js","Components/Patients/SymptomList.js","Components/Patients/TreatmentList.js","Components/Patients/PatientDoctorCard.js","Components/Patients/IndividualPatient.js","App.js","serviceWorker.js","Reducers/index.js","index.js"],"names":["module","exports","MainPage","className","to","Component","DoctorCard","src","this","props","doctor","image","alt","name","specialty","department","phone","email","id","ListOfDoctors","doctors","map","connect","state","DoctorsView","deleteSymptom","symptomObj","type","payload","deleteTreatment","treatmentObj","addRelation","relationObj","deleteRelation","DoctorRegistrationForm","redirect","onChangeHandler","bind","onSubmitHandler","event","preventDefault","updatedDoctorInfo","registerDoctor","setState","target","value","onSubmit","onChange","EditDoctorPatientCard","patient","diagnosis","onClick","dId","pId","emptyRelation","undoPatientSelection","EditDoctorPatientList","doctorRelations","doctorPatientRelations","filter","relation","treatedPatients","i","length","j","patients","push","DoctorDropdownPatientCard","selected","toggleSelection","removePatientFromDoctor","addPatientToDoctor","DoctorEditForm","selectedPatients","dropdownOpen","dropdown","patientsWithNoDoctor","patientsSet","toggleDropdown","finishPatientSelection","deleteDoctorRelations","docImg","editDoctor","oldRelationObj","newRelationObj","console","log","pat","customDropdown","key","newRelation","oldRelation","emptyRelations","deleteDoctor","DoctorPatientCard","DoctorPatientList","IndividualDoctor","PatientCard","ListOfPatients","PatientsView","PatientRegistrationForm","updatedPatientInfo","patientId","nextPatientId","registerPatient","getNextPatientId","IndividualSymptom","symptom_image","trObj","symptom","React","symptoms","EditSymptomList","toRender","pt","tr","PureComponent","EditSymptomListWrapper","newSymptom","enteredSymptom","newSymptomObj","addSymptom","IndividualTreatment","treatment_image","treatment","treatments","EditTreatmentList","EditTreatmentListWrapper","newTreatment","enteredTreatment","newTreatmentObj","addTreatment","EditPatientDoctorCard","undefined","undoDoctorSelection","PatientDropdownDoctorCard","doctorSelect","selectedDoctor","div","EditPatientDoctorCardWrapper","showDoctors","doctorsList","sortedDoctors","toggleShowDoctors","assignDoctor","thisDepartmentDoctors","nonDepartmentDoctors","concat","doctorSet","assignedDoctor","PatientEditForm","showButton","dropdownButton","deletePatientRelations","editPatient","patientRelation","doctorRelation","deletePatient","SymptomList","patientSymptoms","listOfSymptoms","listOfPatientSymptoms","TreatmentList","patientTreatments","listOfTreatments","listOfPatientTreatments","DoctorDoctorCard","IndividualPatient","PatientDoctorCard","App","loadDoctors","loadPatients","loadSymptoms","loadDiagnoses","loadPatientDoctorRelations","path","render","exact","component","Boolean","window","location","hostname","match","standard_doctor_image_1","standard_patient_image_1","nextDoctorId","combineReducers","oldDoctors","action","oldPatients","oldSymptoms","oldTreatments","oldRelations","oldPatientId","ReactDOM","store","createStore","reducers","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.53090462.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/standard_doc_img_1.63a07a67.png\";","module.exports = __webpack_public_path__ + \"static/media/patient-standard-img.adcd2b36.png\";","module.exports = __webpack_public_path__ + \"static/media/symptom_default_image.8bae96e2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/treatment_default_image.7ae17b8c.png\";","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport '../Styles/MainPage.css'\n\nclass MainPage extends Component{\n    render(){\n        return(\n            <div className=\"selection-options\">\n                <Link className=\"nav-button-left\" to=\"/\">Home</Link>\n                <div className=\"right-buttons\">\n                    <Link className=\"nav-button-right\" to=\"/patients\">Manage Patients</Link>\n                    <Link className=\"nav-button-right\" to=\"/doctors\">Manage Doctors</Link>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default MainPage;","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport '../../Styles/Doctors/DoctorCard.css';\n\nclass DoctorCard extends Component{\n    render(){\n        return(\n            <div className=\"individual-doctor-container\">\n                <img className=\"doctor-image\" src = {this.props.doctor.image} alt=\"Doctor Image\"/>\n                <div className=\"doctor-card-text-section\">\n                    <div className=\"doctor-card-name\">\n                        {this.props.doctor.name}\n                    </div>\n                    <div className =\"doctor-specs\">\n                        <div className=\"doctor-specs-specialty\">\n                            {this.props.doctor.specialty}\n                        </div>\n                        <div className=\"doctor-specs-department\">\n                            Department: {this.props.doctor.department}\n                        </div>\n                    </div>\n                    <div className=\"doctor-specs-contact\">\n                        Phone Number: {this.props.doctor.phone}\n                        <div>\n                            Email: {this.props.doctor.email}\n                        </div>\n                    </div>\n                    <div className=\"doctor-card-buttons\">\n                        <Link className=\"doctor-link\" to={\"/doctors/\" + this.props.doctor.id}>\n                            <button className=\"doctor-view-button\">View</button>\n                        </Link>\n                        <Link className=\"doctor-link\" to={\"/doctors/\" + this.props.doctor.id + \"/edit/\"}>\n                            <button className=\"doctor-edit-button\">Edit</button>\n                        </Link>\n                    </div>\n                </div>\n                <br/><br/>\n            </div>\n        );\n    }\n}\n\nexport default DoctorCard;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport DoctorCard from './DoctorCard.js';\nimport './../../Styles/Doctors/ListOfDoctors.css';\n\nclass ListOfDoctors extends Component{\n    constructor(props){\n        super(props);\n    }\n\n    render(){\n        return(\n            <div className=\"doctors-list\">\n                {this.props.doctors.map(doctor => (<DoctorCard doctor={doctor}/>))}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return{\n        doctors: state.doctors\n    };\n}\n\nexport default connect(mapStateToProps, {\n\n})(ListOfDoctors);","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport ListOfDoctors from './ListOfDoctors.js';\nimport '../../Styles/Doctors/DoctorsView.css';\n\nclass DoctorsView extends Component{\n    render(){\n        return(\n            <div>\n                <div className=\"container\">\n                    <div className=\"doctors-view-title\">Registered Doctors</div>\n                        <Link className=\"register-doctor-button\" to=\"/doctorRegistrationForm\">Register a New Doctor</Link>\n                    </div>\n                <ListOfDoctors/>\n            </div>\n        );\n    }\n}\n\nexport default DoctorsView;","export const registerDoctor = doctor => {\n    return {\n        type: 'REGISTER_DOCTOR',\n        payload: doctor\n    };\n};\n\nexport const editDoctor = doctor => {\n    return {\n        type: \"EDIT_DOCTOR\",\n        payload: doctor\n    };\n};\n\nexport const deleteDoctor = doctor => {\n    return{\n        type: \"DELETE_DOCTOR\",\n        payload: doctor\n    };\n};\n\nexport const registerPatient = doctor => {\n    return {\n        type: 'REGISTER_PATIENT',\n        payload: doctor\n    };\n};\n\nexport const editPatient = doctor => {\n    return {\n        type: \"EDIT_PATIENT\",\n        payload: doctor\n    };\n};\n\nexport const deletePatient = doctor => {\n    return{\n        type: \"DELETE_PATIENT\",\n        payload: doctor\n    };\n};\n\nexport const addSymptom = symptomObj => {\n    return{\n        type: \"ADD_SYMPTOM\",\n        payload: symptomObj\n    };\n};\n\nexport const deleteSymptom = symptomObj => {\n    return{\n        type: \"DELETE_SYMPTOM\",\n        payload: symptomObj\n    };\n};\n\nexport const addTreatment = treatmentObj => {\n    return{\n        type: \"ADD_TREATMENT\",\n        payload: treatmentObj\n    };\n};\n\nexport const deleteTreatment = treatmentObj => {\n    return{\n        type: \"DELETE_TREATMENT\",\n        payload: treatmentObj\n    };\n};\n\n\nexport const addRelation = relationObj => {\n    return{\n        type: \"ADD_RELATION\",\n        payload: relationObj\n    };\n};\n\nexport const deleteRelation = relationObj => {\n    return{\n        type: \"DELETE_RELATION\",\n        payload: relationObj\n    };\n};\n\nexport const getNextPatientId = () => {\n    return{\n        type: \"GET_NEXT_PATIENT_ID\"\n    };\n};","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {registerDoctor} from '../../Actions';\nimport {Redirect} from 'react-router';\nimport '../../Styles/Doctors/DoctorRegistrationForm.css';\n\nclass DoctorRegistrationForm extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            name: \"\",\n            specialty: \"\",\n            department: \"\",\n            phone: \"\",\n            email: \"\",\n            image: \"\",\n            redirect: false\n        }\n\n        this.onChangeHandler = this.onChangeHandler.bind(this);\n        this.onSubmitHandler = this.onSubmitHandler.bind(this);\n    }\n\n    onSubmitHandler(event) {\n        event.preventDefault();\n\n        let updatedDoctorInfo = {\n            name: this.state.name,\n            specialty: this.state.specialty,\n            department: this.state.department,\n            phone: this.state.phone,\n            email: this.state.email,\n            image: this.state.image\n        }\n        this.props.registerDoctor(updatedDoctorInfo);\n\n        // PUT request here\n        //not working, but works if the line above is commented out??\n        this.setState({\n            redirect: true\n        })\n    }\n\n    onChangeHandler(event){\n            this.setState({\n                [event.target.name]: event.target.value\n            })\n    }\n\n    render(){\n        if (this.state.redirect){\n            return(\n                <Redirect to=\"/doctors/\"/>\n            )\n        }\n        return(\n            <div>\n                <form className=\"doctor-registration-form\" onSubmit={this.onSubmitHandler}>\n                    <label className=\"standard-label\">Name:\n                        <div>\n                            <input className=\"standard-input\" name=\"name\" onChange={this.onChangeHandler} value={this.state.name}/>\n                        </div>\n                    </label>\n                    <label className=\"standard-label\">Specialty:\n                        <div>\n                            <input className=\"standard-input\" name=\"specialty\" onChange={this.onChangeHandler} value={this.state.specialty}/>\n                        </div>\n                    </label>\n                    <label className=\"standard-label\">Department:\n                        <div>\n                            <input className=\"standard-input\" name=\"department\" onChange={this.onChangeHandler} value={this.state.department}/>\n                        </div>\n                    </label>\n                    <label className=\"standard-label\">Emergency Phone Number:\n                        <div>\n                            <input className=\"standard-input\" name=\"phone\" onChange={this.onChangeHandler} value={this.state.phone}/>\n                        </div>\n                    </label>\n                    <label className=\"standard-label\">Email:\n                        <div>\n                            <input className=\"standard-input\" name=\"email\" onChange={this.onChangeHandler} value={this.state.email}/>\n                        </div>\n                    </label>\n                    <label className=\"standard-label\">Image:\n                        <div>\n                            <input className=\"standard-input\" name=\"image\" onChange={this.onChangeHandler} value={this.state.image}/>\n                        </div>\n                    </label>\n                    <input className=\"confirm-button\" type=\"submit\" value=\"Complete Registration\"/>\n                </form>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return({\n        doctors: state.doctors\n    });\n}\n\nexport default connect (mapStateToProps, {\n    registerDoctor\n})(DoctorRegistrationForm);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {deleteRelation} from '../../Actions';\nimport {addRelation} from '../../Actions';\nimport {Link} from 'react-router-dom';\nimport '../../Styles/Doctors/EditDoctorPatientCard.css';\n\nclass EditDoctorPatientCard extends Component{\n    constructor(props){\n        super(props);\n    }\n\n    render(){\n        return(\n\n            <div className=\"edit-doctor-patient-card-container\">\n                <img className=\"edit-doctor-patient-image\" src = {this.props.patient.image}/>\n                <div className=\"edit-doctor-patient-card-text-section\">\n                <Link to={\"/patients/\" + this.props.patient.id + \"/edit/\"}>\n                <button className=\"edit-doctor-patient-card-edit-button\">Edit</button>\n                </Link>\n                <div className=\"edit-doctor-patient-card-name\">\n                    {this.props.patient.name}\n                </div>\n                <div className=\"edit-doctor-patient-card-diagnosis\">\n                    Diagnosis: {this.props.patient.diagnosis}\n                </div>\n                <button className=\"edit-doctor-patient-card-remove-button\" onClick={() => {\n                    let relationObj = {dId: this.props.doctor.id, pId: this.props.patient.id}\n                    this.props.deleteRelation(relationObj);\n                    let emptyRelation = {dId: -1, pId: this.props.patient.id}\n                    this.props.addRelation(emptyRelation);\n                    this.props.undoPatientSelection();\n                    }}>Remove From Doctor</button>\n                <div className=\"edit-doctor-patient-card-department\">\n                    Department: {this.props.patient.department}\n                </div>\n                <div className=\"edit-doctor-patient-contact-section\">\n                    Contact: {this.props.patient.phone}\n                </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return({\n        \n    });\n}\n\nexport default connect (mapStateToProps,{\n    deleteRelation,\n    addRelation\n})(EditDoctorPatientCard);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport EditDoctorPatientCard from './EditDoctorPatientCard.js';\n\nclass EditDoctorPatientList extends Component{\n    constructor(props){\n        super(props);\n    }\n\n    render(){\n        let doctorRelations = this.props.doctorPatientRelations.filter(relation => (relation.dId === this.props.doctor.id));\n        let treatedPatients = [];\n        for (let i = 0; i < doctorRelations.length; i++){\n            for (let j = 0; j < this.props.patients.length; j++){\n                if (this.props.patients[j].id === doctorRelations[i].pId){\n                    treatedPatients.push(this.props.patients[j]);\n                }\n            }\n        }\n        if (treatedPatients.length > 0){\n            return(\n                treatedPatients.map(patient => \n                    <EditDoctorPatientCard doctor={this.props.doctor} patient={patient} undoPatientSelection={this.props.undoPatientSelection}/>\n                )\n            );\n        }\n        else{\n            return(\n                <div>This doctor currently has no patients</div>\n            );\n        }\n    }\n}\n\nconst mapStateToProps = state => {\n    return({\n        patients: state.patients,\n        doctorPatientRelations: state.doctorPatientRelations\n    });\n}\n\nexport default connect (mapStateToProps,{\n    \n})(EditDoctorPatientList);","import React, {Component} from 'react';\nimport '../../Styles/Doctors/DoctorDropdownPatientCard.css';\n\nclass DoctorDropdownPatientCard extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            selected: false\n        }\n        this.toggleSelection = this.toggleSelection.bind(this);\n    }\n\n    toggleSelection(){\n        if (this.state.selected){\n            this.props.removePatientFromDoctor(this.props.patient);\n        }\n        else{\n            this.props.addPatientToDoctor(this.props.patient)\n        }\n        this.setState({selected: !this.state.selected});\n    }\n\n    render(){\n        if (!this.state.selected){\n            return(\n                <div className=\"dropdown-patient-card-container-unselected\" onClick={this.toggleSelection}>\n                <img className=\"dropdown-patient-image\" src = {this.props.patient.image}/>\n                    <div className=\"dropdown-patient-card-text-section\">\n                    {/* <Link to={\"/patients/\" + this.props.patient.id}>\n                            <button className=\"patient-card-view-button\">View Patient</button>\n                        </Link> */}\n                        <div className=\"dropdown-patient-card-name\">\n                            {this.props.patient.name}\n                        </div>\n                        <div className=\"dropdown-patient-card-diagnosis\">\n                            Diagnosis: {this.props.patient.diagnosis}\n                        </div>\n                        <div className=\"dropdown-patient-card-department\">\n                            Department: {this.props.patient.department}\n                        </div>\n                        <div className=\"dropdown-patient-contact-section\">\n                            Contact: {this.props.patient.phone}\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n        else{\n            return(\n                <div className=\"dropdown-patient-card-container-selected\" onClick={this.toggleSelection}>\n                <img className=\"dropdown-patient-image\" src = {this.props.patient.image}/>\n                    <div className=\"dropdown-patient-card-text-section\">\n                    {/* <Link to={\"/patients/\" + this.props.patient.id}>\n                            <button className=\"patient-card-view-button\">View Patient</button>\n                        </Link> */}\n                        <div className=\"dropdown-patient-card-name\">\n                            {this.props.patient.name}\n                        </div>\n                        <div className=\"dropdown-patient-card-diagnosis\">\n                            Diagnosis: {this.props.patient.diagnosis}\n                        </div>\n                        <div className=\"dropdown-patient-card-department\">\n                            Department: {this.props.patient.department}\n                        </div>\n                        <div className=\"dropdown-patient-contact-section\">\n                            Contact: {this.props.patient.phone}\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n\nexport default DoctorDropdownPatientCard;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {editDoctor} from '../../Actions';\nimport {deleteDoctor} from '../../Actions';\nimport {addRelation} from '../../Actions';\nimport {deleteRelation} from '../../Actions';\nimport {Redirect} from 'react-router';\nimport EditDoctorPatientList from './EditDoctorPatientList.js';\nimport DoctorDropdownPatientCard from './DoctorDropdownPatientCard.js';\nimport '../../Styles/Doctors/DoctorRegistrationForm.css';\nimport '../../Styles/Doctors/DoctorEditForm.css';\n\nclass DoctorEditForm extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            name: this.props.doctor.name,\n            specialty: this.props.doctor.specialty,\n            department: this.props.doctor.department,\n            phone: this.props.doctor.phone,\n            email: this.props.doctor.email,\n            image: \"\",\n            selectedPatients: [],\n            dropdownOpen: false,\n            dropdown: <div/>,\n            patientsWithNoDoctor: [],\n            patientsSet: false,\n            redirect: false\n        }\n\n        this.onChangeHandler = this.onChangeHandler.bind(this);\n        this.onSubmitHandler = this.onSubmitHandler.bind(this);\n        this.addPatientToDoctor = this.addPatientToDoctor.bind(this);\n        this.removePatientFromDoctor = this.removePatientFromDoctor.bind(this);\n        this.toggleDropdown = this.toggleDropdown.bind(this);\n        this.finishPatientSelection = this.finishPatientSelection.bind(this);\n        this.undoPatientSelection = this.undoPatientSelection.bind(this);\n        this.deleteDoctorRelations = this.deleteDoctorRelations.bind(this);\n    }\n\n    onSubmitHandler(event) {\n        event.preventDefault();\n\n        let docImg = \"\";\n        if (this.state.image === \"\"){\n            docImg = this.props.doctor.image\n        }\n\n        let updatedDoctorInfo = {\n            id: this.props.doctor.id,\n            name: this.state.name,\n            specialty: this.state.specialty,\n            department: this.state.department,\n            phone: this.state.phone,\n            email: this.state.email,\n            image: this.state.image\n        }\n        if (docImg !== \"\"){\n            updatedDoctorInfo.image = docImg\n        }\n        this.props.editDoctor(updatedDoctorInfo);\n\n        // PUT request here\n        //not working, but works if the line above is commented out??\n        this.setState({\n            redirect: true\n        })\n    }\n\n    deleteDoctorRelations(){\n        let doctorRelations = this.props.doctorPatientRelations.filter(relation => (relation.dId === this.props.doctor.id));\n        if (doctorRelations){\n            for (let i = doctorRelations.length - 1; i >= 0; i--){\n                let oldRelationObj = doctorRelations[i];\n                let newRelationObj = {dId: -1, pId: doctorRelations[i].pId}\n                this.props.deleteRelation(oldRelationObj);\n                this.props.addRelation(newRelationObj);\n            }\n        }\n    }\n\n    onChangeHandler(event){\n            this.setState({\n                [event.target.name]: event.target.value\n            })\n    }\n\n    addPatientToDoctor(patient){\n        let selectedPatients = this.state.selectedPatients;\n        selectedPatients.push(patient);\n        console.log(selectedPatients);\n        this.setState({selectedPatients})\n    }\n\n    removePatientFromDoctor(patient){\n        let selectedPatients = this.state.selectedPatients.filter(pat => (pat.id !== patient.id));\n        console.log(selectedPatients);\n        this.setState({selectedPatients});\n    }\n\n    toggleDropdown(){\n        let customDropdown = <div className=\"dropdown-patients\">There are no patients without a doctor</div>\n        if (this.state.patientsWithNoDoctor.length > 0){\n            customDropdown = <div className=\"dropdown-patients\">\n                    {this.state.patientsWithNoDoctor.map(patient => (\n                        <DoctorDropdownPatientCard key={\"dropdown\"+patient.id} \n                        addPatientToDoctor={this.addPatientToDoctor} \n                        removePatientFromDoctor = {this.removePatientFromDoctor}\n                        patient={patient}/>\n                    ))}\n                    <button className=\"add-patients-to-doctor-button\" onClick={this.finishPatientSelection}>Add Patients to Doctor</button>\n            </div>\n        }\n        if (this.state.dropdownOpen){\n            this.setState({\n                dropdown: <div/>,\n                dropdownOpen: false\n            })\n        }\n        else{\n            this.setState({\n                dropdown: customDropdown,\n                dropdownOpen: true\n            })\n        }\n    }\n\n    finishPatientSelection(){\n        for (let i = 0; i < this.state.selectedPatients.length; i++){\n            let newRelation = {dId: this.props.doctor.id, pId: this.state.selectedPatients[i].id}\n            let oldRelation = {dId: -1, pId: this.state.selectedPatients[i].id}\n            this.props.addRelation(newRelation);\n            this.props.deleteRelation(oldRelation);\n        }\n        this.setState({\n            selectedPatients: [],\n            patientsSet: false\n        })\n        this.toggleDropdown();\n    }\n\n    undoPatientSelection(){\n        this.setState({patientsSet: false})\n    }\n\n    render(){\n        if (this.state.redirect){\n            return(\n                <Redirect to=\"/doctors/\"/>\n            )\n        }\n        let emptyRelations = this.props.doctorPatientRelations.filter(relation => relation.dId === -1);\n        let patientsWithNoDoctor = [];\n        for (let i = 0; i < emptyRelations.length; i++){\n            for (let j = 0; j < this.props.patients.length; j++){\n                if (this.props.patients[j].id === emptyRelations[i].pId){\n                    patientsWithNoDoctor.push(this.props.patients[j]);\n                }\n            }\n        }\n        if (!this.state.patientsSet){\n            this.setState({\n                patientsWithNoDoctor,\n                patientsSet: true\n            })\n        }\n        return(\n            <div className=\"main-doctor-edit-container\">\n                <form className=\"doctor-edit-form\" onSubmit={this.onSubmitHandler}>\n                <label className=\"standard-label\">Name:\n                        <div>\n                            <input className=\"standard-input\" name=\"name\" onChange={this.onChangeHandler} value={this.state.name}/>\n                        </div>\n                    </label>\n                    <label className=\"standard-label\">Specialty:\n                        <div>\n                            <input className=\"standard-input\" name=\"specialty\" onChange={this.onChangeHandler} value={this.state.specialty}/>\n                        </div>\n                    </label>\n                    <label className=\"standard-label\">Department:\n                        <div>\n                            <input className=\"standard-input\" name=\"department\" onChange={this.onChangeHandler} value={this.state.department}/>\n                        </div>\n                    </label>\n                    <label className=\"standard-label\">Emergency Phone Number:\n                        <div>\n                            <input className=\"standard-input\" name=\"phone\" onChange={this.onChangeHandler} value={this.state.phone}/>\n                        </div>\n                    </label>\n                    <label className=\"standard-label\">Email:\n                        <div>\n                            <input className=\"standard-input\" name=\"email\" onChange={this.onChangeHandler} value={this.state.email}/>\n                        </div>\n                    </label>\n                    <label className=\"standard-label\">Image:\n                        <div>\n                            <input className=\"standard-input\" name=\"image\" onChange={this.onChangeHandler} value={this.state.image}/>\n                        </div>\n                    </label>\n                    <input className=\"standard-doctor-edit-button\" type=\"submit\" value=\"Finish Editing\"/>\n                    <button className=\"standard-doctor-delete-button\" onClick={() => {\n                    this.deleteDoctorRelations();\n                    this.props.deleteDoctor(this.props.doctor);\n                    this.setState({\n                        redirect: true\n                    })\n                    }}>Delete Doctor\n                </button>\n                </form>\n                <div className=\"doctors-patient-view-list\">\n                    <EditDoctorPatientList doctor={this.props.doctor} undoPatientSelection={this.undoPatientSelection}/>\n                </div>\n                <button className=\"add-patients-to-doctor-button\" onClick={this.toggleDropdown}>Add More Patients</button>\n                <div className=\"doctor-dropdown-container\">\n                    {this.state.dropdown}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return({\n        doctors: state.doctors,\n        patients: state.patients,\n        doctorPatientRelations: state.doctorPatientRelations\n    });\n}\n\nexport default connect (mapStateToProps, {\n    editDoctor,\n    deleteDoctor,\n    addRelation,\n    deleteRelation\n})(DoctorEditForm);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {Link} from 'react-router-dom';\nimport '../../Styles/Doctors/DoctorPatientCard.css';\n\nclass DoctorPatientCard extends Component{\n    constructor(props){\n        super(props);\n    }\n\n    render(){\n        return(\n            <div className=\"patient-card-container\">\n                <img className=\"patient-image\" src = {this.props.patient.image}/>\n                <div className=\"patient-card-text-section\">\n                <Link to={\"/patients/\" + this.props.patient.id}>\n                        <button className=\"patient-card-view-button\">View Patient</button>\n                    </Link>\n                    <div className=\"patient-card-name\">\n                        {this.props.patient.name}\n                    </div>\n                    <div className=\"patient-card-diagnosis\">\n                        Diagnosis: {this.props.patient.diagnosis}\n                    </div>\n                    <div className=\"patient-card-department\">\n                        Department: {this.props.patient.department}\n                    </div>\n                    <div className=\"patient-contact-section\">\n                        Contact: {this.props.patient.phone}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return({\n        \n    });\n}\n\nexport default connect (mapStateToProps,{\n\n})(DoctorPatientCard);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport DoctorPatientCard from './DoctorPatientCard.js';\nimport '../../Styles/Doctors/DoctorPatientList.css';\n\nclass DoctorPatientList extends Component{\n    constructor(props){\n        super(props);\n    }\n\n    render(){\n        let doctorRelations = this.props.doctorPatientRelations.filter(relation => (relation.dId === this.props.doctor.id));\n        let treatedPatients = [];\n        for (let i = 0; i < doctorRelations.length; i++){\n            for (let j = 0; j < this.props.patients.length; j++){\n                if (this.props.patients[j].id === doctorRelations[i].pId){\n                    treatedPatients.push(this.props.patients[j]);\n                }\n            }\n        }\n        if (treatedPatients.length > 0){\n            return(\n                treatedPatients.map(patient => \n                    <DoctorPatientCard className=\"individual-patient-card\" doctor={this.props.doctor} patient={patient}/>\n                )\n            );\n        }\n        else{\n            return(\n                <div className=\"no-patients-list\">This doctor currently has no patients</div>\n            );\n        }\n    }\n}\n\nconst mapStateToProps = state => {\n    return({\n        patients: state.patients,\n        doctorPatientRelations: state.doctorPatientRelations\n    });\n}\n\nexport default connect (mapStateToProps,{\n    \n})(DoctorPatientList);","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport DoctorPatientList from './DoctorPatientList.js';\nimport '../../Styles/Doctors/IndividualDoctor.css';\n\nclass IndividualDoctor extends Component{\n    constructor(props){\n        super(props);\n    }\n\n    render(){\n        return(\n            <div>\n                <div className=\"doctor-card-profile-container\">\n                    <div className=\"doctor-card-profile\">\n                        <img className=\"doctor-profile-image\" src={this.props.doctor.image}/>\n                        <div className=\"doctor-profile-text-section\">\n                            <Link to={\"/doctors/\" + this.props.doctor.id + \"/edit/\"}>\n                                <button className=\"edit-button\">Edit</button>\n                            </Link>\n                            <div className=\"doctor-name\">\n                                {this.props.doctor.name}\n                            </div>\n                            <div className=\"doctor-specialty\">\n                                {this.props.doctor.specialty}\n                            </div>\n                            <div className=\"doctor-department\">\n                                Department: {this.props.doctor.department}\n                            </div>\n                            <div className=\"contact-section\">\n                            <div className=\"phone-num\">\n                                Emergency Contact: {this.props.doctor.phone}\n                            </div>\n                            Email: {this.props.doctor.email}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"doctor-card-profile-container\">\n                    <div className=\"doctors-patients\">Doctor's Patients\n                    </div>\n                    <DoctorPatientList className=\"list-of-patients\" doctor={this.props.doctor}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default IndividualDoctor;","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport '../../Styles/Doctors/DoctorCard.css';\nimport '../../Styles/Patients/PatientCard.css';\n\nclass PatientCard extends Component{\n    render(){\n        return(\n            <div className=\"individual-doctor-container\">\n                <img className=\"doctor-image\" src = {this.props.patient.image} alt=\"Patient Image\"/>\n                <div className=\"doctor-card-text-section\">\n                    <div className=\"doctor-card-name\">\n                        {this.props.patient.name}\n                    </div>\n                    <div className =\"doctor-specs\">\n                        <div className=\"patient-specs-diagnosis\">\n                            Diagnosis: {this.props.patient.diagnosis}\n                        </div>\n                        <div className=\"doctor-specs-department\">\n                            Department: {this.props.patient.department}\n                        </div>\n                    </div>\n                    <div className=\"doctor-specs-contact\">\n                        Phone Number: {this.props.patient.phone}\n                    </div>\n                    <div className=\"doctor-card-buttons\">\n                        <Link className=\"doctor-link\" to={\"/patients/\" + this.props.patient.id}>\n                            <button className=\"doctor-view-button\">View</button>\n                        </Link>\n                        <Link className=\"doctor-link\" to={\"/patients/\" + this.props.patient.id + \"/edit/\"}>\n                            <button className=\"doctor-edit-button\">Edit</button>\n                        </Link>\n                    </div>\n                </div>\n                <br/><br/>\n            </div>\n\n        );\n    }\n}\n\nexport default PatientCard;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport PatientCard from './PatientCard.js';\nimport './../../Styles/Doctors/ListOfDoctors.css';\n\nclass ListOfPatients extends Component{\n    constructor(props){\n        super(props);\n    }\n\n    render(){\n        return(\n            <div className=\"doctors-list\">\n                {this.props.patients.map(patient => (<PatientCard patient={patient}/>))}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return{\n        patients: state.patients\n    };\n}\n\nexport default connect(mapStateToProps, {\n\n})(ListOfPatients);","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport ListOfPatients from './ListOfPatients.js';\nimport '../../Styles/Doctors/DoctorsView.css';\n\nclass PatientsView extends Component{\n    render(){\n        return(\n        <div>\n            <div className=\"container\">\n                <div className=\"doctors-view-title\">Registered Patients</div>\n                    <Link className=\"register-doctor-button\" to=\"/patientRegistrationForm\">Register a New Patient</Link>\n                </div>\n            <ListOfPatients/>\n        </div>\n        );\n    }\n}\n\nexport default PatientsView;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {registerPatient} from '../../Actions';\nimport {getNextPatientId} from '../../Actions';\nimport {addRelation} from '../../Actions';\nimport {Redirect} from 'react-router';\nimport '../../Styles/Doctors/DoctorRegistrationForm.css';\n\nclass PatientRegistrationForm extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            name: \"\",\n            diagnosis: \"\",\n            department: \"\",\n            phone: \"\",\n            image: \"\",\n            redirect: false\n        }\n\n        this.onChangeHandler = this.onChangeHandler.bind(this);\n        this.onSubmitHandler = this.onSubmitHandler.bind(this);\n    }\n\n    onSubmitHandler(event) {\n        event.preventDefault();\n\n        let updatedPatientInfo = {\n            name: this.state.name,\n            diagnosis: this.state.diagnosis,\n            department: this.state.department,\n            phone: this.state.phone,\n            image: this.state.image\n        }\n\n        let patientId = this.props.nextPatientId;\n        this.props.registerPatient(updatedPatientInfo);\n        let newRelation = {dId: -1, pId: patientId};\n        this.props.addRelation(newRelation);\n\n        // PUT request here\n        //not working, but works if the line above is commented out??\n        this.setState({\n            redirect: true\n        })\n    }\n\n    onChangeHandler(event){\n            this.setState({\n                [event.target.name]: event.target.value\n            })\n    }\n\n    render(){\n        if (this.state.redirect){\n            return(\n                <Redirect to=\"/patients/\"/>\n            )\n        }\n        return(\n            <div>\n                <form className=\"doctor-registration-form\" onSubmit={this.onSubmitHandler}>\n                    <label className=\"standard-label\">Name:\n                        <div>\n                            <input className=\"standard-input\" name=\"name\" onChange={this.onChangeHandler} value={this.state.name}/>\n                        </div>\n                    </label>\n                    <label className=\"standard-label\">Diagnosis:\n                        <div>\n                            <input className=\"standard-input\" name=\"diagnosis\" onChange={this.onChangeHandler} value={this.state.diagnosis}/>\n                        </div>\n                    </label>\n                    <label className=\"standard-label\">Department:\n                        <div>\n                            <input className=\"standard-input\" name=\"department\" onChange={this.onChangeHandler} value={this.state.department}/>\n                        </div>\n                    </label>\n                    <label className=\"standard-label\">Phone Number:\n                        <div>\n                            <input className=\"standard-input\" name=\"phone\" onChange={this.onChangeHandler} value={this.state.phone}/>\n                        </div>\n                    </label>\n                    <label className=\"standard-label\">Image:\n                        <div>\n                            <input className=\"standard-input\" name=\"image\" onChange={this.onChangeHandler} value={this.state.image}/>\n                        </div>\n                    </label>\n                    <input className=\"confirm-button\" type=\"submit\" value=\"Complete Registration\"/>\n                </form>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return({\n        patients: state.patients,\n        nextPatientId: state.nextPatientId\n    });\n}\n\nexport default connect (mapStateToProps, {\n    registerPatient,\n    getNextPatientId,\n    addRelation\n})(PatientRegistrationForm);","import React from 'react';\nimport {connect} from 'react-redux';\nimport {deleteSymptom} from '../../Actions'\nimport symptom_image from '../../Styles/Images/symptom_default_image.jpg';\n\nclass IndividualSymptom extends React.Component{\n        constructor(props){\n            super(props)\n        }\n        render(){\n        return(\n            <div className=\"individual-patient-individual-treatment\">\n                <img className=\"patient-props-image\" src = {symptom_image}/>\n                <div className=\"patient-text-props\">\n                    {this.props.trObj.symptom}\n                    <button className=\"delete-treatment-button\" onClick={() => this.props.deleteSymptom(this.props.trObj)}>Remove</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return({\n        symptoms: state.symptoms\n    });\n}\n\nexport default connect (mapStateToProps,{\n    deleteSymptom\n})(IndividualSymptom);","import React, {PureComponent} from 'react';\nimport {connect} from 'react-redux';\nimport {deleteSymptom} from '../../Actions';\nimport IndividualSymptom from './IndividualSymptom.js';\n\nclass EditSymptomList extends PureComponent{\n    constructor(props){\n        super(props);\n    }\n\n    render(){\n        let toRender = this.props.symptoms.filter(pt => (pt.id === this.props.patient.id));\n        if (toRender.length > 0){\n            return(\n                toRender.map(tr => {\n                    let trObj = {id: this.props.patient.id, symptom:tr.symptom}\n                    return(\n                        <div>\n                            <IndividualSymptom trObj={trObj} />\n                        </div>\n                    );\n                })\n                \n            );\n        }\n        else{\n            return(\n                <div>The patient currently has no symptoms</div>\n            );\n        }\n    }\n}\n\nconst mapStateToProps = state => {\n    return({\n        symptoms: state.symptoms\n    });\n}\n\nexport default connect (mapStateToProps,{\n    deleteSymptom\n})(EditSymptomList);","import React, {PureComponent} from 'react';\nimport {connect} from 'react-redux';\nimport {addSymptom} from '../../Actions';\nimport EditSymptomList from './EditSymptomList.js';\nimport '../../Styles/Patients/EditTreatmentListWrapper.css';\n\nclass EditSymptomListWrapper extends PureComponent{\n    constructor(props){\n        super(props);\n        this.state = {\n            newSymptom: \"\"\n        }\n        this.onSubmitHandler = this.onSubmitHandler.bind(this);\n        this.onChangeHandler = this.onChangeHandler.bind(this);\n    }\n\n    onSubmitHandler(event){\n        event.preventDefault();\n        let enteredSymptom = this.state.newSymptom;\n        let patientId = this.props.patient.id;\n        let newSymptomObj = {id: patientId, symptom: enteredSymptom}\n        this.props.addSymptom(newSymptomObj);\n        this.setState({newSymptom: \"\"})\n    }\n\n    onChangeHandler(event){\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    render(){\n        return(\n            <div className=\"treatment-edit-wrapper\">\n                <EditSymptomList patient={this.props.patient}/>\n                <form onSubmit={this.onSubmitHandler}>\n                    <label className=\"standard-treatment-label\">Add New Symptom:\n                        <input className=\"standard-treatment-input\" name=\"newSymptom\" onChange={this.onChangeHandler} value={this.state.newSymptom}/>\n                    </label>\n                    <input className=\"add-treatment-button\" type=\"submit\" value=\"Add Symptom\"/>\n                </form>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return({\n        symptoms: state.symptoms\n    });\n}\n\nexport default connect (mapStateToProps,{\n    addSymptom\n})(EditSymptomListWrapper);","import React from 'react';\nimport {connect} from 'react-redux';\nimport {deleteTreatment} from '../../Actions'\nimport '../../Styles/Patients/IndividualPatient.css';\nimport treatment_image from '../../Styles/Images/treatment_default_image.png';\n\nclass IndividualTreatment extends React.Component{\n        constructor(props){\n            super(props)\n        }\n        render(){\n        return(\n            <div className=\"individual-patient-individual-treatment\">\n                <img className=\"patient-props-image\" src = {treatment_image}/>\n                <div className=\"patient-text-props\">\n                    {this.props.trObj.treatment}\n                    <button className=\"delete-treatment-button\" onClick={() => this.props.deleteTreatment(this.props.trObj)}>Remove</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return({\n        treatments: state.treatments\n    });\n}\n\nexport default connect (mapStateToProps,{\n    deleteTreatment\n})(IndividualTreatment);","import React, {PureComponent} from 'react';\nimport {connect} from 'react-redux';\nimport {deleteTreatment} from '../../Actions';\nimport IndividualTreatment from './IndividualTreatment.js';\n\nclass EditTreatmentList extends PureComponent{\n    constructor(props){\n        super(props);\n    }\n\n    render(){\n        let toRender = this.props.treatments.filter(pt => (pt.id === this.props.patient.id));\n        if (toRender.length > 0){\n            return(\n                toRender.map(tr => {\n                    let trObj = {id: this.props.patient.id, treatment:tr.treatment}\n                    return(\n                        <div>\n                            <IndividualTreatment trObj={trObj} />\n                        </div>\n                    );\n                })\n                \n            );\n        }\n        else{\n            return(\n                <div>The patient currently receives no treatments</div>\n            );\n        }\n    }\n}\n\nconst mapStateToProps = state => {\n    return({\n        treatments: state.treatments\n    });\n}\n\nexport default connect (mapStateToProps,{\n    deleteTreatment\n})(EditTreatmentList);","import React, {PureComponent} from 'react';\nimport {connect} from 'react-redux';\nimport {addTreatment} from '../../Actions';\nimport EditTreatmentList from './EditTreatmentList.js';\nimport '../../Styles/Patients/EditTreatmentListWrapper.css';\n\nclass EditTreatmentListWrapper extends PureComponent{\n    constructor(props){\n        super(props);\n        this.state = {\n            newTreatment: \"\"\n        }\n        this.onSubmitHandler = this.onSubmitHandler.bind(this);\n        this.onChangeHandler = this.onChangeHandler.bind(this);\n    }\n\n    onSubmitHandler(event){\n        event.preventDefault();\n        let enteredTreatment = this.state.newTreatment;\n        let patientId = this.props.patient.id;\n        let newTreatmentObj = {id: patientId, treatment: enteredTreatment}\n        this.props.addTreatment(newTreatmentObj);\n        this.setState({newTreatment: \"\"})\n    }\n\n    onChangeHandler(event){\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    render(){\n        return(\n            <div className=\"treatment-edit-wrapper\">\n                <EditTreatmentList patient={this.props.patient}/>\n                <form onSubmit={this.onSubmitHandler}>\n                    <label className=\"standard-treatment-label\">Add New Treatment:\n                        <div>\n                            <input className=\"standard-treatment-input\" name=\"newTreatment\" onChange={this.onChangeHandler} value={this.state.newTreatment}/>\n                        </div>\n                    </label>\n                    <input className=\"add-treatment-button\" type=\"submit\" value=\"Add Treatment\"/>\n                </form>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return({\n        treatments: state.treatments\n    });\n}\n\nexport default connect (mapStateToProps,{\n    addTreatment\n})(EditTreatmentListWrapper);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {deleteRelation} from '../../Actions';\nimport {addRelation} from '../../Actions';\nimport {Link} from 'react-router-dom';\nimport '../../Styles/Doctors/EditDoctorPatientCard.css';\nimport '../../Styles/Patients/EditPatientDoctorCard.css';\n\nclass EditPatientDoctorCard extends Component{\n    constructor(props){\n        super(props);\n    }\n\n    render(){\n        if (this.props.doctor === undefined){\n            return(\n                <div>\n                    No Assigned Doctor\n                </div>\n            );\n        }\n        return(\n            <div className=\"edit-doctor-patient-card-container\">\n                <img className=\"edit-doctor-patient-image\" src = {this.props.doctor.image}/>\n                <div className=\"edit-doctor-patient-card-text-section\">\n\n                    <Link to={\"/doctors/\" + this.props.doctor.id + \"/edit/\"}>\n                    <button className=\"edit-patient-edit-doctor-patient-card-edit-button\">Edit</button>\n                    </Link>\n\n                    <div className=\"edit-doctor-patient-card-name\">\n                        {this.props.doctor.name}\n                    </div>\n                    <div className=\"edit-doctor-patient-card-diagnosis\">\n                        {this.props.doctor.specialty}\n                    </div>\n\n                    <button className=\"edit-patient-edit-doctor-patient-card-remove-button\" onClick={() => {\n                        let relationObj = {dId: this.props.doctor.id, pId: this.props.patient.id}\n                        this.props.deleteRelation(relationObj);\n                        let emptyRelation = {dId: -1, pId: this.props.patient.id}\n                        this.props.addRelation(emptyRelation);\n                        this.props.undoDoctorSelection();\n                        }}>Remove Doctor From Patient</button>\n\n                    <div className=\"edit-doctor-patient-card-department\">\n                        Department: {this.props.doctor.department}\n                    </div>\n                    <div className=\"edit-doctor-patient-contact-section\">\n                        Contact: {this.props.doctor.phone}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return({\n        \n    });\n}\n\nexport default connect (mapStateToProps,{\n    deleteRelation,\n    addRelation\n})(EditPatientDoctorCard);","import React, {Component} from 'react';\nimport '../../Styles/Doctors/EditDoctorPatientCard.css';\nimport '../../Styles/Patients/EditPatientDoctorCard.css';\n\nclass PatientDropdownDoctorCard extends Component{\n    constructor(props){\n        super(props);\n        this.toggleSelection = this.toggleSelection.bind(this);\n    }\n\n    toggleSelection(){\n        this.props.doctorSelect(this.props.doctor);\n    }\n\n    render(){\n        if (this.props.selectedDoctor && this.props.selectedDoctor.id === this.props.doctor.id){\n            return(\n                <div className=\"selected-patient-card-container\" div className=\"selected\" onClick={this.toggleSelection}>\n                    <img className=\"patient-image\" src = {this.props.doctor.image}/>\n                    <div className=\"patient-card-text-section\">\n                        <div className=\"patient-card-name\">\n                            {this.props.doctor.name}\n                        </div>\n                        <div className=\"patient-card-diagnosis\">\n                            {this.props.doctor.specialty}\n                        </div>\n                        <div className=\"patient-card-department\">\n                            Department: {this.props.doctor.department}\n                        </div>\n                        <div className=\"patient-contact-section\">\n                            Contact: {this.props.doctor.phone}\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n        else{\n            return(\n                <div className=\"unselected-patient-card-container\" onClick={this.toggleSelection}>\n                    <img className=\"patient-image\" src = {this.props.doctor.image}/>\n                    <div className=\"patient-card-text-section\">\n                        <div className=\"patient-card-name\">\n                            {this.props.doctor.name}\n                        </div>\n                        <div className=\"patient-card-diagnosis\">\n                            {this.props.doctor.specialty}\n                        </div>\n                        <div className=\"patient-card-department\">\n                            Department: {this.props.doctor.department}\n                        </div>\n                        <div className=\"patient-contact-section\">\n                            Contact: {this.props.doctor.phone}\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n\nexport default PatientDropdownDoctorCard;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {addRelation} from '../../Actions';\nimport {deleteRelation} from '../../Actions';\nimport EditPatientDoctorCard from './EditPatientDoctorCard.js';\nimport PatientDropdownDoctorCard from './PatientDropdownDoctorCard.js';\nimport '../../Styles/Patients/PatientDropdownDoctorCard.css';\n\nclass EditPatientDoctorCardWrapper extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            showDoctors: false,\n            doctorsList: <div/>,\n            sortedDoctors: [],\n            selectedDoctor: undefined\n        }\n        \n        this.toggleShowDoctors = this.toggleShowDoctors.bind(this);\n        this.assignDoctor = this.assignDoctor.bind(this);\n        this.doctorSelect = this.doctorSelect.bind(this);\n\n    }\n\n    componentWillMount(){\n        let thisDepartmentDoctors = this.props.doctors.filter(doctor => (this.props.patient.department === doctor.department));\n        let nonDepartmentDoctors = this.props.doctors.filter(doctor => (this.props.patient.department !== doctor.department));\n        let sortedDoctors = thisDepartmentDoctors.concat(nonDepartmentDoctors);\n        this.setState({sortedDoctors});\n    }\n\n    doctorSelect(doctor){\n        this.setState({selectedDoctor: doctor});\n    }\n\n    assignDoctor(){\n        if(this.state.selectedDoctor){\n            let emptyRelation = {dId: -1, pId: this.props.patient.id};\n            let newRelation = {dId: this.state.selectedDoctor.id, pId: this.props.patient.id};\n            this.props.deleteRelation(emptyRelation);\n            this.props.addRelation(newRelation);\n            this.setState({\n                showDoctors: false,\n                doctorsList: <div/>\n            })\n        }\n    }\n\n    toggleShowDoctors(){\n        if (this.state.showDoctors){\n            this.setState({\n                showDoctors: !this.state.showDoctors,\n                doctorsList: <div/>\n            })\n        }\n        else{\n            this.setState({\n                showDoctors: !this.state.showDoctors,\n                doctorsList: <div className=\"sorted-doctors-list\">\n                    <div className=\"sorted-doctors-list\">\n                        {this.state.sortedDoctors.map(doctor => \n                            <PatientDropdownDoctorCard doctor={doctor} doctorSelect={this.doctorSelect} selectedDoctor={this.state.selectedDoctor} />\n                        )}\n                        <button className=\"assign-doctor-button\" onClick={this.assignDoctor}>\n                            Assign Doctor\n                        </button></div>\n                    </div>\n            })\n        }\n    }\n\n    render(){\n        if (this.props.doctorSet){\n            return(\n                <EditPatientDoctorCard doctor={this.props.assignedDoctor} patient={this.props.patient} undoDoctorSelection={this.props.undoDoctorSelection}/>\n            );\n        }\n        else{\n            return(\n                <div>\n                    <div className=\"no-assigned-doctor\">This patient has no assigned doctor</div>\n                    <button className=\"assign-doctor-button\" onClick={this.toggleShowDoctors}>\n                        Add Doctor to Patient\n                    </button>\n                    {this.state.doctorsList}\n                </div>\n            );\n        }\n    }\n}\n\nconst mapStateToProps = state => {\n    return({\n        doctors: state.doctors,\n        doctorPatientRelations: state.doctorPatientRelations\n    });\n}\n\nexport default connect (mapStateToProps, {\n    addRelation,\n    deleteRelation\n})(EditPatientDoctorCardWrapper);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {editPatient} from '../../Actions';\nimport {deletePatient} from '../../Actions';\nimport {deleteRelation} from '../../Actions';\nimport {Redirect} from 'react-router';\nimport EditSymptomListWrapper from './EditSymptomListWrapper.js';\nimport EditTreatmentListWrapper from './EditTreatmentListWrapper.js';\nimport EditPatientDoctorCardWrapper from './EditPatientDoctorCardWrapper.js';\nimport '../../Styles/Patients/PatientEditForm.css';\n\nclass PatientEditForm extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            name: this.props.patient.name,\n            diagnosis: this.props.patient.diagnosis,\n            department: this.props.patient.department,\n            phone: this.props.patient.phone,\n            image: \"\",\n            assignedDoctor: undefined,\n            doctorSet: false,\n            showButton: true,\n            dropdownButton: <div/>,\n            redirect: false\n        }\n\n        this.onChangeHandler = this.onChangeHandler.bind(this);\n        this.onSubmitHandler = this.onSubmitHandler.bind(this);\n        this.undoDoctorSelection = this.undoDoctorSelection.bind(this);\n        this.deletePatientRelations = this.deletePatientRelations.bind(this);\n    }\n\n    onSubmitHandler(event) {\n        event.preventDefault();\n\n        let updatedPatientInfo = {\n            id: this.props.patient.id,\n            name: this.state.name,\n            diagnosis: this.state.diagnosis,\n            department: this.state.department,\n            image: this.props.patient.image,\n            phone: this.state.phone\n        }\n\n        if (this.state.image !== \"\"){\n            updatedPatientInfo.image = this.state.image\n        }\n\n        this.props.editPatient(updatedPatientInfo);\n\n        // PUT request here\n        this.setState({\n            redirect: true\n        })\n    }\n\n    deletePatientRelations(){\n        let patientRelation = this.props.doctorPatientRelations.filter(relation => (relation.pId === this.props.patient.id));\n        if (patientRelation.length > 0){\n            let relationObj = patientRelation[0];\n            this.props.deleteRelation(relationObj);\n        }\n    }\n\n    onChangeHandler(event){\n            this.setState({\n                [event.target.name]: event.target.value\n            })\n    }\n\n    undoDoctorSelection(){\n        this.setState({doctorSet: false})\n    }\n\n    render(){\n        if (this.state.redirect){\n            return(\n                <Redirect to=\"/patients/\"/>\n            )\n        }\n\n        let doctorRelation = this.props.doctorPatientRelations.filter(relation => (relation.pId === this.props.patient.id))[0];\n        let assignedDoctor = undefined;\n        if (doctorRelation.dId !== -1){\n            for (let i = 0; i < this.props.doctors.length; i++){\n                if (this.props.doctors[i].id === doctorRelation.dId){\n                    assignedDoctor = this.props.doctors[i];\n                    if (!this.state.doctorSet){\n                        this.setState({\n                            doctorSet: true,\n                            dropdownButton: <div/>,\n                            assignedDoctor\n                        });\n                    }\n                    break;\n                }\n            }\n        }\n        if (!this.state.doctorSet && this.state.showButton){\n            console.log(this.state.doctorSet)\n            console.log(this.state.showButton)\n            this.setState({\n                dropdownButton: <button>Button</button>, \n                showButton: false\n            })\n        }\n\n        return(\n            <div>\n                <form className=\"patient-edit-form\" onSubmit={this.onSubmitHandler}>\n                <label className=\"patient-edit-standard-label\">Name:\n                        <div>\n                            <input className=\"patient-edit-standard-input\" name=\"name\" onChange={this.onChangeHandler} value={this.state.name}/>\n                        </div>\n                    </label>\n                    <label className=\"patient-edit-standard-label\">Diagnosis:\n                        <div>\n                            <input className=\"patient-edit-standard-input\" name=\"diagnosis\" onChange={this.onChangeHandler} value={this.state.diagnosis}/>\n                        </div>\n                    </label>\n                    <label className=\"patient-edit-standard-label\">Department:\n                        <div>\n                            <input className=\"patient-edit-standard-input\" name=\"department\" onChange={this.onChangeHandler} value={this.state.department}/>\n                        </div>\n                    </label>\n                    <label className=\"patient-edit-standard-label\">Phone Number:\n                        <div>\n                            <input className=\"patient-edit-standard-input\" name=\"phone\" onChange={this.onChangeHandler} value={this.state.phone}/>\n                        </div>\n                    </label>\n                    <label className=\"patient-edit-standard-label\">Image:\n                        <div>\n                            <input className=\"patient-edit-standard-input\" name=\"image\" onChange={this.onChangeHandler} value={this.state.image}/>\n                        </div>\n                    </label>\n                    <div className=\"patient-edit-buttons\">\n                        <input className=\"patient-edit-confirm-button\" type=\"submit\" value=\"Finish Editing\"/>\n                        <button className=\"patient-edit-delete-button\" onClick={() => {\n                        this.deletePatientRelations();\n                        this.props.deletePatient(this.props.patient);\n                        this.setState({\n                            redirect: true\n                        })\n                        }}>Discharge Patient</button>\n                    </div>\n                </form>\n                <div className=\"patient-edit-form\">\n                    <div className=\"assigned-doctor-header\">Assigned Doctor\n                    </div>\n                    <div className=\"doctor-selection-section\">\n                        <EditPatientDoctorCardWrapper doctorSet={this.state.doctorSet} assignedDoctor={assignedDoctor} patient={this.props.patient} undoDoctorSelection={this.undoDoctorSelection}/>\n                    </div>\n                <div className=\"edit-patient-symptoms-and-treatments-container\">\n                    <div className=\"edit-patient-symptoms-and-treatments\">\n                        <div className=\"treatment-list\">Symptoms:\n                            <EditSymptomListWrapper patient={this.props.patient}/>\n                        </div>\n                        <div className=\"edit-patient-treatment-list\">Treatments:\n                        <EditTreatmentListWrapper patient={this.props.patient}/>\n                        </div>\n                    </div>\n                </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return({\n        patients: state.patients,\n        doctors: state.doctors,\n        doctorPatientRelations: state.doctorPatientRelations\n    });\n}\n\nexport default connect (mapStateToProps, {\n    editPatient,\n    deletePatient,\n    deleteRelation\n})(PatientEditForm);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport '../../Styles/Patients/IndividualPatient.css';\nimport symptom_image from '../../Styles/Images/symptom_default_image.jpg';\n\nclass SymptomList extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            patientSymptoms: []\n        }\n    }\n\n    componentDidMount(){\n        let listOfSymptoms = this.props.symptoms;\n        let listOfPatientSymptoms = [];\n        for (let i = 0; i < listOfSymptoms.length; i++){\n            if (listOfSymptoms[i].id === this.props.patient.id){\n                listOfPatientSymptoms.push(listOfSymptoms[i].symptom)\n            }\n        }\n        this.setState({\n            patientSymptoms: listOfPatientSymptoms\n        })\n    }\n\n    render(){\n        return(\n            this.state.patientSymptoms.map(symptom => \n                <div className=\"individual-patient-individual-treatment\">\n                    <img className=\"patient-props-image\" src = {symptom_image}/>\n                    <div className=\"patient-text-props\">\n                    {symptom}</div>\n                    </div>)\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return({\n        symptoms: state.symptoms\n    });\n}\n\nexport default connect (mapStateToProps,{\n\n})(SymptomList);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport '../../Styles/Patients/IndividualPatient.css';\nimport treatment_image from '../../Styles/Images/treatment_default_image.png';\n\nclass TreatmentList extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            patientTreatments: []\n        }\n    }\n\n    componentDidMount(){\n        let listOfTreatments = this.props.treatments;\n        let listOfPatientTreatments = [];\n        for (let i = 0; i < listOfTreatments.length; i++){\n            if (listOfTreatments[i].id === this.props.patient.id){\n                listOfPatientTreatments.push(listOfTreatments[i].treatment)\n            }\n        }\n        this.setState({\n            patientTreatments: listOfPatientTreatments\n        })\n    }\n\n    render(){\n        return(\n            this.state.patientTreatments.map(treatment => \n                <div className=\"individual-patient-individual-treatment\">\n                <img className=\"patient-props-image\" src = {treatment_image}/>\n                <div className=\"patient-text-props\">\n                {treatment}</div>\n                </div>)\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return({\n        treatments: state.treatments\n    });\n}\n\nexport default connect (mapStateToProps,{\n\n})(TreatmentList);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {Link} from 'react-router-dom';\nimport '../../Styles/Doctors/DoctorPatientCard.css';\n\nclass DoctorDoctorCard extends Component{\n    constructor(props){\n        super(props);\n    }\n\n    render(){\n        if (this.props.doctor === undefined){\n            return(\n                <div>\n                    No Assigned Doctor\n                </div>\n            );\n        }\n        return(\n            <div className=\"patient-card-container\">\n                <img className=\"patient-image\" src = {this.props.doctor.image}/>\n                <div className=\"patient-card-text-section\">\n                    <Link to={\"/doctors/\" + this.props.doctor.id}>\n                        <button className=\"patient-card-view-button\">View Doctor</button>\n                    </Link>\n                    <div className=\"patient-card-name\">\n                        {this.props.doctor.name}\n                    </div>\n                    <div className=\"patient-card-diagnosis\">\n                        {this.props.doctor.specialty}\n                    </div>\n                    <div className=\"patient-card-department\">\n                        Department: {this.props.doctor.department}\n                    </div>\n                    <div className=\"patient-contact-section\">\n                        Contact: {this.props.doctor.phone}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return({\n        \n    });\n}\n\nexport default connect (mapStateToProps,{\n\n})(DoctorDoctorCard);","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport SymptomList from './SymptomList.js';\nimport TreatmentList from './TreatmentList.js';\nimport PatientDoctorCard from './PatientDoctorCard.js';\nimport '../../Styles/Doctors/IndividualDoctor.css';\nimport '../../Styles/Patients/IndividualPatient.css';\n\nclass IndividualPatient extends Component{\n    constructor(props){\n        super(props);\n    }\n\n    render(){\n        let doctorRelation = this.props.doctorPatientRelations.filter(relation => (relation.pId === this.props.patient.id))[0];\n        let assignedDoctor = undefined;\n        if (doctorRelation){\n            for (let i = 0; i < this.props.doctors.length; i++){\n                if (this.props.doctors[i].id === doctorRelation.dId){\n                    assignedDoctor = this.props.doctors[i];\n                    break;\n                }\n            }\n        }\n\n        return(\n            <div>\n                <div className=\"doctor-card-profile-container\">\n                    <div className=\"doctor-card-profile\">\n                        <img className=\"doctor-profile-image\" src = {this.props.patient.image}/>\n                        <div className=\"doctor-profile-text-section\">\n                            <Link to={\"/patients/\" + this.props.patient.id + \"/edit/\"}>\n                                <button className=\"edit-button\">Edit</button>\n                            </Link>\n                            <div className=\"doctor-name\">\n                                {this.props.patient.name}\n                            </div>\n                            <div className=\"doctor-specialty\">\n                                Diagnosis: {this.props.patient.diagnosis}\n                            </div>\n                            <div className=\"doctor-department\">\n                                Department: {this.props.patient.department}\n                            </div>\n                            <div className=\"contact-section\">\n                                <div className=\"phone-num\">\n                                    Emergency Contact: {this.props.patient.phone}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"doctor-card-profile-container\">\n                    <div className=\"doctors-patients\">Assigned Doctor\n                    </div>\n                    <PatientDoctorCard doctor={assignedDoctor}/>\n                </div>\n                <div className=\"symptoms-and-treatments-container\">\n                    <div className=\"symptoms-and-treatments\">\n                        <div className=\"treatment-list\">Symptoms:\n                            <SymptomList patient={this.props.patient}/>\n                        </div>\n                        <div className=\"treatment-list\">Treatments:\n                        <TreatmentList patient={this.props.patient}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return({\n        doctors: state.doctors,\n        doctorPatientRelations: state.doctorPatientRelations\n    });\n}\n\nexport default connect (mapStateToProps,{\n\n})(IndividualPatient);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\n\nimport MainPage from './Components/MainPage.js';\n\nimport DoctorsView from './Components/Doctors/DoctorsView.js';\nimport DoctorRegistrationForm from './Components/Doctors/DoctorRegistrationForm.js';\nimport DoctorEditForm from './Components/Doctors/DoctorEditForm.js';\nimport IndividualDoctor from './Components/Doctors/IndividualDoctor.js';\n\nimport PatientsView from './Components/Patients/PatientsView.js';\nimport PatientRegistrationForm from './Components/Patients/PatientRegistrationForm.js';\nimport PatientEditForm from './Components/Patients/PatientEditForm.js';\nimport IndividualPatient from './Components/Patients/IndividualPatient.js';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state ={\n      doctors: [],\n      patients: []\n    }\n\n    this.loadDoctors = this.loadDoctors.bind(this);\n    this.loadPatients = this.loadPatients.bind(this);\n    this.loadSymptoms = this.loadSymptoms.bind(this);\n    this.loadDiagnoses = this.loadDiagnoses.bind(this);\n    this.loadPatientDoctorRelations = this.loadPatientDoctorRelations.bind(this);\n\n  }\n\n\n  //this will be used upon the initial loading of the app. it will load info about doctors and patients from the database\n  componentDidMount(){\n    this.loadDoctors();\n    this.loadPatients();\n    this.loadSymptoms();\n    this.loadDiagnoses();\n    this.loadPatientDoctorRelations();\n  }\n\n  //loads doctors info from the database\n  loadDoctors(){\n    //to be implemented once the database is set up\n  }\n  //loads patients info from the database\n  loadPatients(){\n    //to be implemented once the database is set up\n  }\n  //loads patient symptoms from the database\n  loadSymptoms(){\n\n  }\n  //loads patient diagnoses from the database\n  loadDiagnoses(){\n\n  }\n  //loads relations between doctors and patients\n  loadPatientDoctorRelations(){\n\n  }\n\n  render(){\n    //getting components for the router\n    const MainPageComponent = () => (<MainPage/>)\n\n    const DoctorsViewComponent = () => (<DoctorsView/>)\n    const DoctorRegistrationFormComponent = () => (<DoctorRegistrationForm/>)\n\n    const PatientsViewComponent = () => (<PatientsView/>)\n    const PatientRegistrationFormComponent = () => (<PatientRegistrationForm/>)\n\n    return( \n      <div className=\"main-app\">\n        <Router>\n          <Route path = \"/\" render={MainPageComponent} />\n          <Switch>\n            <Route exact path = \"/doctors\" component={DoctorsViewComponent} />\n            <Route exact path = \"/doctorRegistrationForm\" component = {DoctorRegistrationFormComponent}/>\n\n            <Route exact path = \"/patients\" render={PatientsViewComponent}/>\n            <Route exact path = \"/patientRegistrationForm\" component = {PatientRegistrationFormComponent}/>\n\n            {this.props.doctors.map(doctor => {\n              return(\n                <Route exact path ={\"/doctors/\" + doctor.id + \"/edit\"}\n                  render={() => {\n                    return <DoctorEditForm doctor={doctor}/>\n                  }}\n                />\n              );\n            })}\n\n            {this.props.doctors.map(doctor => {\n              return(\n                <Route exact path = {\"/doctors/\" + doctor.id}\n                  render={() => {\n                  return(\n                    <IndividualDoctor\n                      doctor={doctor}\n                    />\n                  );\n                }}/>\n              );\n            })}\n\n            {this.props.patients.map(patient => {\n              return(\n                <Route exact path ={\"/patients/\" + patient.id + \"/edit\"}\n                  render={() => {\n                    return <PatientEditForm patient={patient}/>\n                  }}\n                />\n              );\n            })}\n\n            {this.props.patients.map(patient => {\n              return(\n                <Route exact path = {\"/patients/\" + patient.id}\n                  render={() => {\n                  return(\n                    <IndividualPatient\n                      patient={patient}\n                    />\n                  );\n                }}/>\n              );\n            })}\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return{\n    doctors: state.doctors,\n    patients: state.patients\n  };\n}\n\nexport default connect (mapStateToProps, {\n\n})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from 'redux';\nimport standard_doctor_image_1 from '../Styles/Images/standard_doc_img_1.png';\nimport standard_patient_image_1 from '../Styles/Images/patient-standard-img.png';\n\nlet doctors = [\n    {id: 1, name: \"Doctor 1\", specialty: \"Neurologist\", department: \"Neurology\", phone: \"212-632-1923\", email: \"doctor@doctormail.com\", image: standard_doctor_image_1},\n    {id: 2, name: \"Doctor 2\", specialty: \"Dermatologist\", department: \"Dermatology\", phone: \"718-773-6236\", email: \"doctor@doctormail.com\", image: standard_doctor_image_1},\n    {id: 3, name: \"Doctor 3\", specialty: \"Psychologist\", department: \"Psychology\" ,phone: \"929-645-2145\", email: \"doctor@doctormail.com\", image: standard_doctor_image_1},\n    {id: 4, name: \"Doctor 4\", specialty: \"Surgeon\", department: \"Department of Surgery\", phone: \"347-153-7453\", email: \"doctor@doctormail.com\", image: standard_doctor_image_1},\n    {id: 5, name: \"Doctor 5\", specialty: \"Pediatrician\", department: \"Family Medicine\", phone: \"212-126-1753\", email: \"doctor@doctormail.com\", image: standard_doctor_image_1}\n];\n\nlet patients = [\n    {id: 1, name: \"Patient 1\", diagnosis: \"Cold\", department: \"Family Medicine\", phone: \"212-632-1923\", image: standard_patient_image_1},\n    {id: 2, name: \"Patient 2\", diagnosis: \"Anxiety Disorder\", department: \"Psychology\", phone: \"718-773-6236\", image: standard_patient_image_1},\n    {id: 3, name: \"Patient 3\", diagnosis: \"Tourette Syndrome\", department: \"Neurology\", phone: \"929-645-2145\", image: standard_patient_image_1},\n    {id: 4, name: \"Patient 4\", diagnosis: \"Idk\", department: \"Idk Dept\", phone: \"347-153-7453\", image: standard_patient_image_1},\n    {id: 5, name: \"Patient 5\", diagnosis: \"Idk2\", department: \"Idk2 Dept\", phone: \"212-126-1753\", image: standard_patient_image_1}\n];\n\n//patient ID is mapped to their symptom\nlet symptoms = [\n    {id: 1, symptom: \"Fever\"},\n    {id: 1, symptom: \"Tiredness\"},\n    {id: 2, symptom: \"Fear\"},\n    {id: 3, symptom: \"Speech Issues\"},\n    {id: 2, symptom: \"Tiredness\"},\n    {id: 4, symptom: \"S1\"},\n    {id: 5, symptom: \"S2\"}\n];\n\n//patient ID is mapped to their treatment\nlet treatments = [\n    {id: 1, treatment: \"TR1\"},\n    {id: 1, treatment: \"TR2\"},\n    {id: 1, treatment: \"TR3\"},\n    {id: 2, treatment: \"TR1\"},\n    {id: 2, treatment: \"TR5\"},\n    {id: 3, treatment: \"TR5\"},\n    {id: 4, treatment: \"TR4\"},\n    {id: 4, treatment: \"TR6\"},\n];\n\n//doctor id is mapped to patient id to see which patient is treated by which doctor\nlet doctorPatientRelations = [\n    {dId: -1, pId: 3},\n    {dId: 1, pId: 4},\n    {dId: -1, pId: 5},\n    {dId: 5, pId: 1},\n    {dId: 3, pId: 2}\n];\n\nlet nextDoctorId = 6;\nlet nextPatientId = 6;\n\nconst doctorsReducer = (oldDoctors = doctors, action) => {\n    switch(action.type){\n        case \"REGISTER_DOCTOR\":\n            action.payload.id = nextDoctorId;\n            if (action.payload.image === \"\"){\n                action.payload.image = standard_doctor_image_1;\n            }\n            nextDoctorId++;\n            return oldDoctors.concat(action.payload);\n        case \"EDIT_DOCTOR\":\n            for (let i = 0; i < oldDoctors.length; i++){\n                if (oldDoctors[i].id === action.payload.id){\n                    oldDoctors[i] = action.payload;\n                    return oldDoctors;\n                }\n            }\n        case \"DELETE_DOCTOR\":\n            return oldDoctors.filter(doctor => (doctor.id !== action.payload.id));\n        default:\n            return oldDoctors;\n    }\n}\n\nconst patientsReducer = (oldPatients = patients, action) => {\n    switch(action.type){\n        case \"REGISTER_PATIENT\":\n            action.payload.id = nextPatientId;\n            if (action.payload.image === \"\"){\n                action.payload.image = standard_patient_image_1;\n            }\n            nextPatientId++;\n            return oldPatients.concat(action.payload);\n        case \"EDIT_PATIENT\":\n            for (let i = 0; i < oldPatients.length; i++){\n                if (oldPatients[i].id === action.payload.id){\n                    oldPatients[i] = action.payload;\n                    return oldPatients;\n                }\n            }\n        case \"DELETE_PATIENT\":\n            return oldPatients.filter(patient => (patient.id !== action.payload.id));\n        default:\n            return oldPatients;\n    }\n}\n\n\nconst symptomsReducer = (oldSymptoms = symptoms, action) => {\n    switch(action.type){\n        case \"ADD_SYMPTOM\":\n            return oldSymptoms.concat(action.payload);\n        case \"DELETE_SYMPTOM\":\n        return oldSymptoms.filter(symptomObj => (symptomObj.id !== action.payload.id || symptomObj.symptom !== action.payload.symptom));\n        default:\n            return oldSymptoms;\n    }\n}\n\nconst treatmentsReducer = (oldTreatments = treatments, action) => {\n    switch(action.type){\n        case \"ADD_TREATMENT\":\n            return oldTreatments.concat(action.payload);\n        case \"DELETE_TREATMENT\":\n            return oldTreatments.filter(treatmentObj => (treatmentObj.id !== action.payload.id || treatmentObj.treatment !== action.payload.treatment));\n        default:\n            return oldTreatments;\n    }\n}\n\nconst doctorPatientReducer = (oldRelations = doctorPatientRelations, action) => {\n    switch(action.type){\n        case \"ADD_RELATION\":\n            return oldRelations.concat(action.payload);\n        case \"DELETE_RELATION\":\n            return oldRelations.filter(relationObj => (relationObj.dId !== action.payload.dId || relationObj.pId !== action.payload.pId));\n        default:\n            return oldRelations;\n    }\n}\n\nconst nextPatientIdReducer = (oldPatientId = nextPatientId, action) => {\n    switch(action.type){\n        case \"GET_NEXT_PATIENT_ID\":\n            return oldPatientId;\n        default:\n            return oldPatientId;\n    }\n}\n\nexport default combineReducers({\n    doctors: doctorsReducer,\n    patients: patientsReducer,\n    symptoms: symptomsReducer,\n    treatments: treatmentsReducer,\n    doctorPatientRelations: doctorPatientReducer,\n    nextPatientId: nextPatientIdReducer\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducers from './Reducers/index.js';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\n\nReactDOM.render(\n  <Provider store={createStore(reducers)}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}